#!/usr/bin/env bash

# install
#
#	This is a script to install my dotfiles on a machine by symlinking
#	everything into the right place in the home directory.
#
# ARGUMENTS
#
#	- "rollback" - if passed as the first argument, we will remove all
#	symlinks that have been created, uninstalling the dotfiles.
#
# ENVIRONMENT OPTIONS
#
#	- `DEBUG=1` to dry run
#
# EXAMPLES
#
#	Install all dotfiles into the home directory:
#
#		./install
#
#
#	Uninstall everything that was previously symlinked:
#
#		./install rollback
#
#
#	Do a dry run to see what commands the script would have run:
#
#		DEBUG=1 ./install

set -uef -o pipefail

# --[ Configuration ]

# Set the "base" directory we should install dotfiles into. You can change this
# value to test the script without messing with a real home directory. Rather
# useful for debugging.
export BASE_DIR="$HOME"

# Set DEBUG=1 to echo all commands instead of running.
export DEBUG="${DEBUG:-}"

# --[ END Configuration ]

MKDIR=mkdir
LN=ln
RM=rm

if [[ "${DEBUG:-}" != "" ]] ; then
	# If we pass 'DEBUG=1' (value is irrelevant), we should prefix commands
	# with 'echo' to do a dry run.
	#
	# These must respect the custom IFS set in `link_config`
	MKDIR="echo		mkdir"
	LN="echo		ln"
	RM="echo		rm"
fi

export MKDIR
export LN
export RM

export RECEIPT="./.receipt"

rollback() {
	for target in $(cat "$RECEIPT") ; do
		$RM -f "$target"
	done

	[[ "$DEBUG" = "" ]] && echo > "$RECEIPT"
}

link_config() {
	OLDIFS="$IFS"
	IFS="		"
	target="$2/${1#"$3/"}"

	if [ ! -e "$target" ] ; then
		[[ ! -e "$(dirname $target)" ]] && $MKDIR -p "$(dirname $target)"
		$LN -s "$PWD/$1" "$target"
		echo "$target" >> "$RECEIPT"
	fi

	IFS="$OLDIFS"

}
export -f link_config

if [ "${1:-}" = "rollback" ] ; then
	rollback
	exit 0
fi

find configs -mindepth 1 -type f -exec bash -c 'link_config "$1" $BASE_DIR configs' _ {} \;
