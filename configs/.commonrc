# ------------------------------------------------------------------------------
# Environment
# ------------------------------------------------------------------------------
export TERM="xterm-256color"
export EDITOR="nvim"
export PATH="$HOME/.local/bin:$HOME/bin:$PATH"

export GOPROXY="direct"

SED_EXEC="sed"
if hash gsed >/dev/null 2>&1 ; then
	SED_EXEC="gsed"
fi

PYTHON_EXEC="python"
if hash python3 >/dev/null 2>&1 ; then
	PYTHON_EXEC="python3"
fi

# ------------------------------------------------------------------------------
# Aliases
# ------------------------------------------------------------------------------
alias e="$EDITOR"

if hash exa >/dev/null 2>&1 ; then
	alias ls="exa"
fi

# ------------------------------------------------------------------------------
# Custom functions
# ------------------------------------------------------------------------------
serve() {
	"${PYTHON_EXEC}" -m http.server "${1:-3000}"
}

cdp() {
	# "cd to project"
	#
	# Finds source code project directories and allows fuzzy-finding one,
	# then cd's to whichever you choose. "Code" is flat reverse-domain
	# format repos, like "com.whatever.reponame" and so maxdepth is just 1.
	targets="$(fd --type d --max-depth=1 '' "${HOME}/Code")"
	target="$(echo $targets | $SED_EXEC -e "s%$HOME/%%" | fzy)"

	if ! [ "$target" = "" ] ; then
		# only cd if we actually chose something
		cd "$HOME/$target"
	fi
}

fzyfindlocal() {
	# Use fzy to find a file or folder in/below the pwd.
	#
	# Useful for running commands quickly, if bound to a key. For example:
	#
	#	$ bin/test <c-f>
	#	> mytest
	#	test/myproject/lib/subcomponent/mytest
	#
	#	$ bin/test test/myproject/lib/subcomponent/mytest
	#
	# Most of this was "inspired" by jhawthorn's fzy.zsh:
	#	https://github.com/jhawthorn/dotfiles/blob/d99d6907f890e38445124aa657ea317ad3046b13/zsh/zsh/fzy.zsh
	local selected_path
	echo # Run fzy underneath the current prompt
	selected_path=$(fd -t f | fzy) || return
	LBUFFER="$LBUFFER${(q)selected_path} " # ${(q)VAR} shell-escapes the string
}

eg() {
	# Edit a modified or untracked file in the current Git repository.
	# Useful for quickly reopening things you've modified or added since
	# the last commit.
	#
	#	$ git st
	#	...
	#	    modified:   test/myproject/lib/subcomponent/mytest
	#
	#	$ eg
	#	> mytest
	#	test/myproject/lib/subcomponent/mytest
	#
	local choice
	choice="$(git status --porcelain | awk '{print $2}' | fzy)"

	if [[ "$choice" != "" ]] ; then
		# Only open the editor if we chose something.
		$EDITOR "$choice"
	fi
}

# ------------------------------------------------------------------------------
# Libraries/Imports
# ------------------------------------------------------------------------------
if [ -f ~/.env ]; then
	source ~/.env
fi

if [ -d "$HOME/.asdf" ] ; then
	source "$HOME/.asdf/asdf.sh"
fi
