# ------------------------------------------------------------------------------
# Environment
# ------------------------------------------------------------------------------
export TERM="xterm-256color"
export EDITOR="nvim"
export PATH="$HOME/.local/bin:$HOME/bin:/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"

export GOPROXY="direct"

SED_EXEC="sed"
if hash gsed >/dev/null 2>&1 ; then
	SED_EXEC="gsed"
fi

PYTHON_EXEC="python"
if hash python3 >/dev/null 2>&1 ; then
	PYTHON_EXEC="python3"
fi

# ------------------------------------------------------------------------------
# Aliases
# ------------------------------------------------------------------------------
alias e="$EDITOR"

alias icat="kitty +kitten icat"

# ------------------------------------------------------------------------------
# Custom functions
# ------------------------------------------------------------------------------
serve() {
	"${PYTHON_EXEC}" -m http.server "${1:-3000}"
}

cdp() {
	# "cd to project"
	#
	# Finds source code project directories and allows fuzzy-finding one,
	# then cd's to whichever you choose. "Code" is flat reverse-domain
	# format repos, like "com.whatever.reponame" and so maxdepth is just 1.
	local target
	target="$(fd --type d --max-depth=1 '' --base-directory "${HOME}/Code" | fzy)"

	if ! [ "$target" = "" ] ; then
		# only cd if we actually chose something
		cd "$HOME/Code/$target"
	fi
}

fzyfindlocal() {
	# Use fzy to find a file or folder in/below the pwd.
	#
	# Useful for running commands quickly, if bound to a key. For example:
	#
	#	$ bin/test <c-f>
	#	> mytest
	#	test/myproject/lib/subcomponent/mytest
	#
	#	$ bin/test test/myproject/lib/subcomponent/mytest
	#
	# Most of this was "inspired" by jhawthorn's fzy.zsh:
	#	https://github.com/jhawthorn/dotfiles/blob/d99d6907f890e38445124aa657ea317ad3046b13/zsh/zsh/fzy.zsh
	local selected_path
	echo # Run fzy underneath the current prompt
	selected_path=$(fd -t f | fzy) || return
	LBUFFER="$LBUFFER${(q)selected_path} " # ${(q)VAR} shell-escapes the string
}

eg() {
	# Edit a modified or untracked file in the current Git repository.
	# Useful for quickly reopening things you've modified or added since
	# the last commit.
	#
	#	$ git st
	#	...
	#	    modified:   test/myproject/lib/subcomponent/mytest
	#
	#	$ eg
	#	> mytest
	#	test/myproject/lib/subcomponent/mytest
	#
	local choice
	choice="$(git status --porcelain | awk '{print $2}' | fzy)"

	local relative_pwd
	relative_pwd="${PWD/#$(git rev-parse --show-toplevel)\/}"

	if [[ "$choice" != "" ]] ; then
		# Only open the editor if we chose something.
		$EDITOR "${choice/#$relative_pwd\/}"
	fi
}

kfs() {
	# "kubeconfig fzy select"
	#
	# Finds all the config files under `~/.config/kubes` and sets the one
	# you select as the `KUBECONFIG`. This is an alternative to "contexts"
	# meant to be a bit safer/more explicit.
	local target
	target="$(fd --type f --max-depth=1 '' --base-directory "${HOME}/.config/kubes" | fzy)"
	if ! [ "$target" = "" ] ; then
		export KUBECONFIG="$HOME/.config/kubes/$target"
	fi
}

azp() {
	# "azure-cli profile"
	#
	# Facilitates full switching between entirely different configurations of the
	# Azure CLI, to ensure complete isolation between accounts or configs.
	local target
	target="$(fd --type d --max-depth=1 '' --base-directory "${HOME}/.config/azprofiles" | fzy)"
	if ! [ "$target" = "" ] ; then
		export AZURE_CONFIG_DIR="$HOME/.config/azprofiles/$target"
	fi
}

flp() {
	# "fly profile"
	#
	# Facilitates full switching between entirely different configurations of the
	# Fly.io CLI, to ensure complete isolation between accounts or configs.
	local target
	target="$(fd --type d --max-depth=1 '' --base-directory "${HOME}/.config/flyprofiles" | fzy)"
	if ! [ "$target" = "" ] ; then
		export FLY_CONFIG_DIR="$HOME/.config/flyprofiles/$target"
	fi
}

# ------------------------------------------------------------------------------
# Libraries/Imports
# ------------------------------------------------------------------------------
if [ -f ~/.env ] ; then
	source ~/.env
fi

if hash mise >/dev/null 2>&1 ; then
	eval "$(mise activate ${SHELL##*/})"
fi
